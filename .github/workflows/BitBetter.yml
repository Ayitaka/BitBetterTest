name: BitBetter Image

on:
  push:
    paths-ignore:
      - "**.md"
  schedule:
    - cron:  '0 0 * * *'
jobs:
  check_version:
    runs-on: ubuntu-latest
    name: Check Last Built Version
    outputs:
      buildimage: ${{ steps.get_version.outputs.buildimage }}
      buildversion: ${{ steps.get_version.outputs.buildversion }}
      dockerhub: ${{ steps.set_repo.outputs.dockerhub }}
    steps:
      - uses: actions/checkout@v2
      - name: Get Latest Version
        id: get_version
        run: |
          export BW_VERSION_LATEST="$(curl --silent https://raw.githubusercontent.com/bitwarden/server/master/scripts/bitwarden.sh | grep 'COREVERSION="' | sed 's/^[^"]*"//; s/".*//')"
          export BW_VERSION_LAST_BUILT="$(cat bw_version.txt)"
          if [ $BW_VERSION_LATEST == $BW_VERSION_LAST_BUILT ]; then
            export NEED_BUILD=false
          else
            export NEED_BUILD=true
          fi
          echo "##[set-output name=buildimage;]$NEED_BUILD"
          echo "##[set-output name=buildversion;]$BW_VERSION_LATEST"
      - name: Set Repo
        id: set_repo
        run: |
          export DOCKERHUB=ayitaka
          echo "##[set-output name=dockerhub;]$DOCKERHUB"
          export REPOSITORY=bitbetter
          echo "##[set-output name=dockerhubrepo;]$REPOSITORY"

  build_bitbetter:
    runs-on: ubuntu-latest
    name: Publish BitBetter
    needs: check_version
    if: ${{ needs.check_version.outputs.buildimage == 'true' || github.event_name == 'push' }}
    env:
      DOCKERHUB: ${{ needs.check_version.outputs.dockerhub }}
      REPO: ${{ needs.check_version.outputs.dockerhubrepo }}
      VERSION: ${{ needs.check_version.outputs.buildversion }}
    steps:
      - uses: actions/checkout@v2
      - name: Build Image
        id: build_image
        run: |
          docker build -f ./src/bitBetter/Dockerfile --build-arg BITWARDEN_TAG=bitwarden/api:${{ needs.check_version.outputs.buildversion }} --label com.bitwarden.product="bitbetter" -t ${DOCKERHUB}/${REPO}:api .
          docker build -f ./src/bitBetter/Dockerfile --build-arg BITWARDEN_TAG=bitwarden/identity:${{ needs.check_version.outputs.buildversion }} --label com.bitwarden.product="bitbetter" -t ${DOCKERHUB}/${REPO}:identity .
      - name: Login
        run: |
          docker login -u ${{ secrets.dockerID }} -p ${{ secrets.dockerPassword }}
      - name: Deploy Latest
        run: |
          docker tag ${DOCKERHUB}/${REPO}:api ${DOCKERHUB}/${REPO}:api-latest
          docker tag ${DOCKERHUB}/${REPO}:identity ${DOCKERHUB}/${REPO}:identity-latest
          docker push ${DOCKERHUB}/${REPO}:api-latest
          docker push ${DOCKERHUB}/${REPO}:identity-latest
          echo ${DOCKERHUB}/${REPO}:api-latest Deployed
          echo ${DOCKERHUB}/${REPO}:identity-latest Deployed
      - name: Deploy Tag
        run: |
          docker tag ${DOCKERHUB}/${REPO}:api ${DOCKERHUB}/${REPO}:api-${VERSION}
          docker tag ${DOCKERHUB}/${REPO}:identity ${DOCKERHUB}/${REPO}:identity-${VERSION}
          docker push ${DOCKERHUB}/${REPO}:api-${VERSION}
          docker push ${DOCKERHUB}/${REPO}:identity-${VERSION}
          echo ${DOCKERHUB}/${REPO}:api-${VERSION} Deployed
          echo ${DOCKERHUB}/${REPO}:identity-${VERSION} Deployed
      - name: Save Version Number
        run: |
          echo ${VERSION} > bw_version.txt
      - name: Commit changes
        uses: EndBug/add-and-commit@v4
        with:
          message: "Bitwarden Version Update"
          add: "bw_version.txt"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_lic_generator:
    runs-on: ubuntu-latest
    name: Publish License Generator
    needs: [check_version, build_bitbetter]
    env:
      DOCKERHUB: ${{ needs.check_version.outputs.dockerhub }}
      REPO: ${{ needs.check_version.outputs.dockerhubrepo }}
    steps:
      - uses: actions/checkout@v2
      - name: Build Image
        id: build_image
        run: |
          docker build -f ./src/licenseGen/Dockerfile --label com.bitwarden.product="licensegen" -t ${DOCKERHUB}/${REPO}:licensegen .
      - name: Login
        run: |
          docker login -u ${{ secrets.dockerID }} -p ${{ secrets.dockerPassword }}
      - name: Deploy Latest
        run: |
          docker tag ${DOCKERHUB}/${REPO}:licensegen ${DOCKERHUB}/${REPO}:licensegen-latest
          docker push ${DOCKERHUB}/${REPO}:licensegen-latest
          echo ${DOCKERHUB}/${REPO}:licensegen-latest Deployed

  build_cert_gen:
    runs-on: ubuntu-latest
    name: Publish Certificate Generator
    needs: [check_version, build_bitbetter]
    env:
      DOCKERHUB: ${{ needs.check_version.outputs.dockerhub }}
      REPO: ${{ needs.check_version.outputs.dockerhubrepo }}
    steps:
      - uses: actions/checkout@v2
      - name: Build Image
        id: build_image
        run: |
          docker build -f ./.keys/Dockerfile -t ${DOCKERHUB}/${REPO}:certificate-gen .
      - name: Login
        run: |
          docker login -u ${{ secrets.dockerID }} -p ${{ secrets.dockerPassword }}
      - name: Deploy Latest
        run: |
          docker tag ${DOCKERHUB}/${REPO}:certificate-gen ${DOCKERHUB}/${REPO}:certificate-gen-latest
          docker push ${DOCKERHUB}/${REPO}:certificate-gen-latest
          echo ${DOCKERHUB}/${REPO}:certificate-gen-latest Deployed
